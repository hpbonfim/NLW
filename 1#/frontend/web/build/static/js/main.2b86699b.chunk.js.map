{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","services/api.ts","components/Dropzone/index.tsx","pages/CreatePoint/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","API","axios","create","baseURL","Dropzone","onDrop","useCallback","acceptedFiles","console","log","useDropzone","getRootProps","getInputProps","isDragActive","CreatePoint","history","useHistory","useState","items","setItems","useEffect","get","then","response","data","ufs","setUfs","map","uf","sigla","selectedUf","setSelectedUfs","selectedCity","setSelectedCity","cities","setCities","city","nome","setSelectedPosition","lat","lon","catch","err","error","zoomIn","setZoomIn","selectedPosition","initPosition","setInitPosition","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","a","undefined","Error","address","country_code","alert","state","city_district","village","town","UFs","UF","filter","info","filtered_uf","filtered_city","name","email","whatsapp","inputData","setInputData","handleInputChange","event","target","value","selectedItems","setSelectedItems","preventDefault","post","push","onSubmit","htmlFor","type","onChange","Map","center","zoom","onClick","latlng","lng","TileLayer","attribution","url","Marker","key","item","findIndex","filteredItems","handleSelectItem","includes","image_url","title","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b86699b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47c4581a.svg\";","import React from 'react';\nimport logo from '../../assets/logo.svg'\nimport './styles.css';\nimport {FiLogIn } from 'react-icons/fi'\nimport { Link } from 'react-router-dom';\nconst Home = () => {\n    return (\n      <div id=\"page-home\">\n        <div className=\"content\">\n          <header>\n            <img src={logo} alt=\"logo\"/>\n            </header>\n            <main>\n              <h1>\n                Seu marketplace de coleta de resíduos.\n              </h1>\n              <p>\n              Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente.\n              </p>\n              <Link to=\"/create-point\">\n                <span>\n                  <FiLogIn/>\n                </span>\n                <strong>\n                  Cadastre um ponto de coleta\n                </strong>\n              </Link>\n            </main>\n        </div>\n      </div>\n    );\n  }\n  \n  export default Home;\n  ","import axios from 'axios';\n\nconst API = axios.create({\n    baseURL: 'http://localhost:3333'\n})\n\nexport default API","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport './styles.css'\n\nconst Dropzone = () => {\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n    console.log(acceptedFiles)\n  }, [])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div className=\"dropzone\" {...getRootProps()}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>Drop the files here ...</p> :\n          <p>Drag 'n' drop some files here, or click to select files</p>\n      }\n    </div>\n  )\n}\n\nexport default Dropzone","import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react';\nimport './styles.css';\nimport UFs from './uf.json'\nimport { Link, useHistory } from 'react-router-dom';\nimport logo from '../../assets/logo.svg';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport { Map, TileLayer, Marker } from 'react-leaflet';\nimport { LeafletMouseEvent } from 'leaflet'\nimport API from '../../services/api'\nimport axios from 'axios';\nimport Dropzone from '../../components/Dropzone'\n\ninterface Item {\n    id: number;\n    title: string;\n    image_url: string;\n}\n\ninterface IBGEUFResponse {\n    sigla: string;\n}\n\ninterface IBGECityResponse {\n    nome: string;\n}\n\ninterface SanitizeMapClickedResponse {\n    uf: string;\n    localidade: string\n}\n\nconst CreatePoint = () => {\n    const history = useHistory(); // RETORNAR AO INICIO\n\n    /* ITENS */\n    const [items, setItems] = useState<Item[]>([]); // array ou objeto tem que ser definido o tipo da variável\n    useEffect(() => {\n        // useEffect CARREGA COMPONENTES APENAS UMA VEZ, LIMITADO PELO RECARREGAMENTO (se o array estiver vazio)\n        API.get('items').then(response => {\n            setItems(response.data);\n        });\n\n    }, []);\n    /* --- */\n\n\n    /* IBGE UF */\n    const [ufs, setUfs] = useState<string[]>([]);\n    useEffect(() => {\n        axios.get<IBGEUFResponse[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados')\n            .then(response => {\n                setUfs(response.data.map(uf => uf.sigla));\n            })\n    }, [])\n    /* --- */\n\n\n    /* IBGE CIDADE */\n    const [selectedUf, setSelectedUfs] = useState('0');\n    const [selectedCity, setSelectedCity] = useState('0');\n    const [cities, setCities] = useState<string[]>([]);\n\n    useEffect(() => {\n        // useEffect CARREGA COMPONENTES APENAS UMA VEZ, E VALOR É ALTERADO QUANDO MUDAR O VALOR DO ARRAY\n        if (selectedUf === '0') {\n            return\n        }\n        axios.get<IBGECityResponse[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`)\n            .then(response => {\n                setCities(response.data.map(city => city.nome))\n            })\n    }, [selectedUf])\n\n    function handleSelectUf(event: ChangeEvent<HTMLSelectElement>) {\n        setSelectedUfs(event.target.value)\n    }\n\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>) {\n        setSelectedCity(event.target.value)\n    }\n\n    useEffect(() => {\n        axios.get(`https://nominatim.openstreetmap.org/search?format=json&state=${selectedUf}&city=${selectedCity}`)\n            .then(response => {\n                if (selectedCity !== \"0\" && selectedUf !== \"0\") {\n                    const { data } = response\n                    console.log(selectedUf)\n                    setSelectedPosition([data[0].lat, data[0].lon])\n                }\n                else {\n                    return -1;\n                }\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedCity])\n    /* --- */\n\n\n    /* MAP */\n    const [zoomIn, setZoomIn] = useState<number>(2); // SELECT POSITION ON CLICK MAP\n    const [selectedPosition, setSelectedPosition] = useState<[number, number]>([0, 0]); // SELECT POSITION ON CLICK MAP\n    const [initPosition, setInitPosition] = useState<[number, number]>([0, 0]); // SELECT POSITION ON INIT MAP\n    const [streetName, setStreetName] = useState(''); // SELECT POSITION ON INIT MAP\n\n    useEffect(() => {\n        if (!navigator.geolocation) {\n            const [latitude, longitude] = selectedPosition;\n            setInitPosition([latitude, longitude])\n        } else {\n            navigator.geolocation.getCurrentPosition(position => {\n                const { latitude, longitude } = position.coords;\n                setInitPosition([latitude, longitude])\n            })\n\n        }\n\n    }, [selectedPosition, initPosition])\n\n    function handleMapClick(event: LeafletMouseEvent) {\n        setSelectedPosition([\n            event.latlng.lat,\n            event.latlng.lng\n        ])\n        return setZoomIn(18)\n    }\n\n    useEffect(() => {\n        const [latitude, longitude] = selectedPosition;\n        axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`)\n            .then(async response => {\n                const { data } = response\n                // VERIFICA SE NÃO É DEFAULT VALUES\n                if (latitude !== 0 && longitude !== 0) {\n                    try {\n                        if (data === undefined) {\n                            throw new Error(\"no data received\")\n                        }\n\n                        if (data.address.country_code !== \"br\") {\n                            return (\n                                alert(\"Selecione somente estados Brasileiros\"),\n                                setSelectedPosition([0, 0]),\n                                setSelectedUfs(\"0\"),\n                                setSelectedCity(\"0\")\n                            )\n                        } else\n\n                            if (data.address.state != null || undefined) {\n                                const { state, city_district, city, village, town } = data.address;\n                                console.log(data)\n\n                                UFs.UF\n                                    .filter(info => info.nome === state)\n                                    .map(filtered_uf => {\n                                        return setSelectedUfs(filtered_uf.sigla)\n                                    })\n\n                                cities\n                                    .filter(info =>\n                                        city === info ||\n                                        town === info ||\n                                        village === info ||\n                                        city_district === info\n                                    )\n                                    .map(filtered_city => {\n                                        return (\n                                            setSelectedCity(filtered_city)\n                                        )\n                                    })\n                            } else {\n                                throw new Error(\"invalid data\")\n                            }\n                    }\n                    catch (err) {\n                        return (\n                            alert(\"Selecione somente estados Brasileiros\"),\n                            setSelectedPosition([0, 0]),\n                            setSelectedUfs(\"0\"),\n                            setSelectedCity(\"0\"),\n                            setZoomIn(5)\n                        )\n                    }\n                } else {\n                    return -1;\n                }\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedPosition, zoomIn])\n    /* --- */\n\n    /* INPUTS */\n    const [inputData, setInputData] = useState({\n        name: \"\",\n        email: \"\",\n        whatsapp: \"\"\n    });\n\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\n        const { name, value } = event.target\n\n        setInputData({ ...inputData, [name]: value })\n    }\n\n    /* SELECTS */\n    const [selectedItems, setSelectedItems] = useState<number[]>([])\n    function handleSelectItem(id: number) {\n        const alreadySelected = selectedItems.findIndex(item => item === id)\n\n        if (alreadySelected >= 0) {\n            const filteredItems = selectedItems.filter(item => item !== id)\n            setSelectedItems(filteredItems)\n        } else {\n            setSelectedItems([...selectedItems, id])\n        }\n    }\n    /* --- */\n\n    /* SUBMIT */\n    async function handleSubmit(event: FormEvent) {\n        event.preventDefault()\n\n        const { name, email, whatsapp } = inputData;\n        const uf = selectedUf;\n        const city = selectedCity;\n        const [latitude, longitude] = selectedPosition;\n        const items = selectedItems;\n\n        const data = {\n            name,\n            email,\n            whatsapp,\n            uf,\n            city,\n            latitude,\n            longitude,\n            items\n        }\n\n        await API.post('points', data)\n        alert('Criado com sucesso')\n        history.push('/')\n    }\n\n    /* --- */\n\n    return (\n        <div id=\"page-create-point\">\n            <header>\n                <img src={logo} alt=\"Ecoleta\" />\n\n                <Link to=\"/\">\n                    <FiArrowLeft />\n        Voltar para home\n        </Link>\n            </header>\n\n            <form onSubmit={handleSubmit}>\n                <h1>\n                    Cadastro do <br /> Ponto de Coleta\n                </h1>\n                <Dropzone />\n                <fieldset>\n                    <legend>\n                        <h2>Dados</h2>\n                    </legend>\n                    <div className=\"field\">\n                        <label htmlFor=\"name\">Nome da entidade</label>\n                        <input type=\"text\" name=\"name\" id=\"name\" onChange={handleInputChange} />\n                    </div>\n\n                    <div className=\"field-group\">\n                        <div className=\"field\">\n                            <label htmlFor=\"email\">E-mail</label>\n                            <input type=\"email\" name=\"email\" id=\"email\" onChange={handleInputChange} />\n                        </div>\n                        <div className=\"field\">\n                            <label htmlFor=\"whatsapp\">WhatsApp</label>\n                            <input type=\"text\" name=\"whatsapp\" id=\"whatsapp\" onChange={handleInputChange} />\n                        </div>\n                    </div>\n                </fieldset>\n\n                <fieldset>\n                    <legend>\n                        <h2>Endereço</h2>\n                        <span>Selecione o endereço no mapa</span>\n                    </legend>\n                </fieldset>\n\n                <Map center={selectedPosition} zoom={zoomIn} onClick={handleMapClick}>\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {selectedPosition[0] !== 0 && (\n                        <Marker position={selectedPosition} />\n                    )}\n                </Map>\n\n                <div className=\"field-group\">\n                    <div className=\"field\">\n                        <label htmlFor=\"uf\">Estado (UF)</label>\n                        <select name=\"uf\" id=\"uf\" value={selectedUf} onChange={handleSelectUf}>\n                            <option value=\"0\">Selecione uma UF</option>\n                            {ufs.map(uf => (\n                                <option key={uf} value={uf}>{uf}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"field\">\n                        <label htmlFor=\"city\">Cidade</label>\n                        <select name=\"city\" id=\"city\" value={selectedCity} onChange={handleSelectCity}>\n                            <option value=\"0\">Selecione uma Cidade</option>\n                            {cities.map(city => (\n                                <option key={city} value={city}>{city} </option>\n                            ))}\n                        </select>\n\n\n\n                    </div>\n                </div>\n\n\n                <fieldset>\n                    <legend>\n                        <h2>Ítens de Coleta</h2>\n                        <span>Selecioe um ou mais ítens abaixo</span>\n                    </legend>\n                    <ul className=\"items-grid\">\n                        {items.map(item => (\n                            <li\n                                key={item.id}\n                                onClick={() => handleSelectItem(item.id)}\n                                className={selectedItems.includes(item.id) ? 'selected' : ''}\n                            >\n                                <img src={item.image_url} alt={item.title} />\n                                <span>{item.title}</span>\n                            </li>\n                        ))}\n                    </ul>\n                </fieldset>\n\n                <button type=\"submit\">Cadastrar ponto de Coleta</button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreatePoint;","import React from 'react';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport Home from './pages/Home';\nimport CreatePoint from './pages/CreatePoint';\n\nconst Routes = () => {\n    return (    \n        <BrowserRouter>\n            <Route component={Home} path=\"/\" exact />\n            <Route component={CreatePoint} path=\"/create-point\" exact />\n        </BrowserRouter>\n    )\n}\n\nexport default Routes;","// JSX/TSX é a sintaxe do XML dentro do Javascript\nimport React from 'react';\nimport './App.css';\nimport Routes from './routes';\n\n//  import React, { useState } from 'react';\n//  import Header from './Header'\n//  import Home from './pages/Home'\n\nfunction App() {\n  /**\n    *  const [counter, setCounter] = useState(0); // retorna [valor do estado, função para atualizar o valor do estado]\n    *  function handleButtonClick() {\n    *    setCounter(counter + 1);\n    *  }\n    *  <Header title={`contador: ${counter}`} />\n    *  <button type=\"button\" onClick={handleButtonClick}>CLICK</button>\n   */\n\n  return (\n    <div>\n     <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}